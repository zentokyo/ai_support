import os
import logging
from typing import Dict, List
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from dotenv import load_dotenv
import json
from pathlib import Path
from custom_gigachat import initialize_rag
from langchain_core.messages import HumanMessage, AIMessage

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
HISTORY_DIR = Path("chat_histories")
HISTORY_DIR.mkdir(exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
MAIN_MENU, CHATTING = range(2)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
db, document_chain = initialize_rag()
rag_chat_history: Dict[str, List[Dict]] = {}


class TelegramChatWrapper:
    def __init__(self, user_id: int):
        self.user_id = user_id
        self.history_file = HISTORY_DIR / f"{user_id}.json"
        self.history: List[Dict] = []
        self.load_history()

    def load_history(self):
        if self.history_file.exists():
            with open(self.history_file, "r", encoding="utf-8") as f:
                self.history = json.load(f)
        else:
            self.history = []

    def save_history(self):
        with open(self.history_file, "w", encoding="utf-8") as f:
            json.dump(self.history, f, ensure_ascii=False, indent=2)

    def add_message(self, role: str, content: str):
        self.history.append({"role": role, "content": content})
        self.save_history()

    def clear_history(self):
        self.history = []
        rag_chat_history[str(self.user_id)] = []
        self.save_history()

    def get_langchain_messages(self):
        messages = []
        for msg in self.history[-10:]:
            if msg["role"] == "user":
                messages.append(HumanMessage(content=msg["content"]))
            else:
                messages.append(AIMessage(content=msg["content"]))
        return messages

    def get_recent_messages(self, count=5) -> str:
        if not self.history:
            return "–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø—É—Å—Ç–∞."
        recent = self.history[-count * 2:]
        return "\n\n".join(
            f"üë§ –í—ã: {recent[i]['content']}\nü§ñ –ë–æ—Ç: {recent[i + 1]['content']}"
            for i in range(0, len(recent) - 1, 2)
        )


main_menu_keyboard = [
    ["üì¢ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"],
    ["üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"]
]

main_menu_markup = ReplyKeyboardMarkup(
    keyboard=main_menu_keyboard,
    resize_keyboard=True,
    one_time_keyboard=False
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ "
        "–ø–æ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–§ –∏ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    await update.message.reply_text(welcome_message, reply_markup=main_menu_markup)
    return MAIN_MENU


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìå *–ü–æ–º–æ—â—å*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:\n"
        "üì¢ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É\n"
        "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç ‚Äî —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è\n"
        "üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã\n"
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text, parse_mode="Markdown")


async def clear_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_history = TelegramChatWrapper(user_id)
    chat_history.clear_history()
    await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    chat_wrapper = TelegramChatWrapper(user_id)

    if text == "üì¢ –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é":
        await update.message.reply_text(
            "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å—è 15 –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏ –†–§?\n"
            "‚Ä¢ –ö–∞–∫ —Ä–µ–≥—É–ª–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∞–≤–æ –Ω–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –†–§?"
        )
        return CHATTING

    elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
        chat_wrapper.clear_history()
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞.")
        return MAIN_MENU

    elif text == "üìÑ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π":
        recent = chat_wrapper.get_recent_messages()
        await update.message.reply_text(recent)
        return MAIN_MENU

    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return MAIN_MENU

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text

    chat_wrapper = TelegramChatWrapper(user_id)
    chat_wrapper.add_message("user", user_message)

    try:
        # –í—ã–∑–æ–≤ RAG —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        rag_chat_history.setdefault(str(user_id), [])
        history = chat_wrapper.get_langchain_messages()

        results = db.similarity_search(user_message, k=3)
        inputs = {
            "question": user_message,
            "context": results,
            "chat_history": history
        }

        response = document_chain.invoke(inputs)

        chat_wrapper.add_message("assistant", response)
        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ RAG: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )

    return CHATTING


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=main_menu_markup
    )
    return ConversationHandler.END


def main():
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
            CHATTING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message),
                CommandHandler("clear", clear_history_command),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("clear", clear_history_command))

    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()